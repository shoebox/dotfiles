local vim = vim

return {
  -- {
  --   "nvimtools/none-ls.nvim",
  --   event = "VimEnter",
  --   enabled = true,
  --   keys = {
  --     {
  --       "<leader>!",
  --       function()
  --         vim.lsp.buf.format({
  --           async = true,
  --           filter = function(c)
  --             return c.name == "null-ls" or c.name == "neo-tree" or c.name == "kulala://ui"
  --           end,
  --         })
  --       end,
  --     },
  --   },
  --   config = function()
  --     local null_ls = require("null-ls")
  --     local augroup = vim.api.nvim_create_augroup("LspFormatting", {})
  --
  --     null_ls.setup({
  --       debounce = 500,
  --       default_timeout = 5000,
  --       temp_dir = "/tmp",
  --       update_in_insert = false,
  --       log_level = "warn",
  --       notify_format = "%s",
  --       sources = {
  --         null_ls.builtins.completion.spell,
  --
  --         -- code actions
  --         null_ls.builtins.code_actions.impl,
  --         null_ls.builtins.code_actions.refactoring,
  --         null_ls.builtins.code_actions.statix,
  --
  --         -- diagnostics
  --         null_ls.builtins.diagnostics.ansiblelint,
  --
  --         -- null_ls.builtins.diagnostics.commitlint,
  --         -- null_ls.builtins.diagnostics.sqlfluff.with({
  --         -- 	extra_args = { "--dialect", "postgres" }, -- change to your dialects
  --         -- }),
  --         null_ls.builtins.diagnostics.statix,
  --         null_ls.builtins.diagnostics.terraform_validate,
  --         -- null_ls.builtins.diagnostics.vale,
  --         null_ls.builtins.diagnostics.yamllint,
  --         null_ls.builtins.diagnostics.zsh,
  --
  --         -- Formatting
  --         -- Formatting/nix
  --         -- Formatting/lua
  --         -- null_ls.builtins.formatting.stylua,
  --         -- null_ls.builtins.formatting.prettierd,
  --         -- null_ls.builtins.formatting.terraform_fmt,
  --         -- Formatting/sql
  --       },
  --       on_attach = function(client, bufnr)
  --         if client.supports_method("textDocument/formatting") then
  --           vim.api.nvim_create_autocmd({ "BufLeave", "InsertLeave" }, {
  --             group = augroup,
  --             buffer = bufnr,
  --             callback = function()
  --               if not vim.api.nvim_buf_is_valid(bufnr) then
  --                 return
  --               end
  --
  --               vim.api.nvim_clear_autocmds({ group = augroup, buffer = bufnr })
  --
  --               vim.lsp.buf.format({
  --                 async = true,
  --                 filter = function(c)
  --                   return c.name == "null-ls" or c.name == "neo-tree" or c.name == "kulala://ui"
  --                 end,
  --               })
  --             end,
  --           })
  --           vim.api.nvim_create_autocmd({ "BufWritePre" }, {
  --             buffer = bufnr,
  --             callback = function()
  --               if not vim.api.nvim_buf_is_valid(bufnr) then
  --                 return
  --               end
  --
  --               local infos = vim.fn.getbufinfo(bufnr)
  --
  --               -- do the buffer has any changes
  --               local changed = 0
  --               if type(infos) == "table" and #infos >= 1 then
  --                 changed = infos[1].changed
  --               end
  --               if changed == 1 then
  --                 vim.api.nvim_clear_autocmds({ group = augroup, buffer = bufnr })
  --
  --                 vim.lsp.buf.format({
  --                   async = true,
  --                   filter = function(c)
  --                     return c.name == "null-ls" or c.name == "neo-tree" or c.name == "kulala://ui"
  --                   end,
  --                 })
  --               end
  --             end,
  --           })
  --         end
  --       end,
  --     })
  --   end,
  -- },
}
